#ifndef PYARBORX_ @VIEW_NAME @_CPP
#define PYARBORX_ @VIEW_NAME @_CPP

#include "pyArborX_Views_Util.hpp"

#include "config.hpp"
#include <pybind11/pybind11.h>

@VIEW_INCLUDE @

    namespace py = pybind11;

#define CREATE_VIEW_CLASS(className, viewType, dataType, deepCopyType)         \
  py::class_<viewType>(m, #className)                                          \
      .def(py::init<>())                                                       \
      .def(py::init([](std::string label, size_t size) {                       \
        return new viewType{Kokkos::view_alloc(ExecutionSpace{},               \
                                               Kokkos::WithoutInitializing,    \
                                               label),                         \
                            size};                                             \
      }))                                                                      \
                                                                               \
      .def("size", [](viewType &p) { return p.size(); })                       \
      .def("__getitem__",                                                      \
           [](viewType &p, long unsigned int idx) { return p(idx); })          \
                                                                               \
      .def("__setitem__", [](viewType &p, long unsigned int idx,               \
                             dataType val) { p(idx) = val; })                  \
      .def("create_mirror_view", &create_mirror_view<viewType>)                \
      .def("deep_copy", &deep_copy<viewType, deepCopyType>, py::arg("src"));

void generate @VIEW_NAME @Wrapper(py::module &m)
{
  CREATE_VIEW_CLASS(@VIEW_NAME @, @VIEW_TYPE @, @VIEW_BASE_TYPE @,
                    decltype(create_mirror_view(std::declval<@VIEW_TYPE @>())));
  using MirrorType = decltype(create_mirror_view(std::declval<@VIEW_TYPE @>()));
  using MirrorDataType = @VIEW_BASE_TYPE @;
  CREATE_VIEW_CLASS(@VIEW_NAME @_mirror, MirrorType, MirrorDataType,
                    @VIEW_TYPE @);
}

#endif
