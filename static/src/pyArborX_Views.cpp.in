#ifndef PYARBORX_@VIEW_NAME@_CPP
#define PYARBORX_@VIEW_NAME@_CPP

#include <pybind11/pybind11.h>
#include <ArborX_Point.hpp>

#include "pyArborX_Views_Util.hpp"

@VIEW_INCLUDE@

namespace py = pybind11;

namespace pyArborX{

void generate@VIEW_NAME@Wrapper(py::module & m) {
    py::class_<@VIEW_TYPE@>(m,"@VIEW_NAME@")
      .def(py::init<>())
      .def(py::init([](std::string label,size_t size){
            return new @VIEW_TYPE@{label,size};}))

    .def("size",[](@VIEW_TYPE@& p){return p.size();})
    .def("__getitem__",
        [](@VIEW_TYPE@& p,long unsigned int idx){ return p(idx);}
        )
    .def("__setitem__",
        [](@VIEW_TYPE@& p,long unsigned int idx, @VIEW_BASE_TYPE@ val){p(idx)=val;}
        )
    .def("cpp_type", [](){return "@VIEW_TYPE@";})


    // binding as member functions to avoid even more overloading problems
    .def("create_mirror_view",&pyArborX::create_mirror_view<@VIEW_TYPE@>)
    .def("deep_copy",&pyArborX::deep_copy<@VIEW_TYPE@,decltype(create_mirror_view(std::declval<@VIEW_TYPE@>()))>,py::arg("src"));
}
} // namespace pyArborX
#endif
